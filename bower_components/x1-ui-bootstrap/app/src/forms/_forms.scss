//
// Forms
// --------------------------------------------------

// Normalize non-controls
label {
	font-family: $font-family-1;
	font-weight: $font-weight-medium;
	margin: 0 10px 10px 0;
	color: $headings-color;
}

//hide default close icon for all inputs in IE
input::-ms-clear {
	display: none;
}

.form-group.required .control-label:before {
	content: "* ";
	color: $red;
}

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
	margin-bottom: 20px;
	position: relative;
}

.form-control {
	display: block;
	width: 100%;
	height: $input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
	padding: $padding-base-vertical $padding-small-horizontal;
	font-size: $font-size-base;
	line-height: $input-height-base;
	color: $input-color;
	background-color: $input-bg;
	background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
	border-radius: 0; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
	@include box-shadow(0 0 0 1px transparent, 0 0 0 2px transparent);
	@include transition(border-color ease-in-out .15s, box-shadow ease-in-out .15s);

	// Customize the `:focus` state to imitate native WebKit styles.
	//	@include form-control-focus;
	&:focus {
		@include box-shadow(0 0 0 1px $white, 0 0 0 2px $input-border-hover);
		border-color: $input-border;
		outline: 0;

		//&:hover {
		//	@include box-shadow(0 0 0 1px $white, 0 0 0 2px $input-border-hover);
		//	border-color: $input-border;
		//}
	}

	// Placeholder
	@include placeholder;

	// Disabled and read-only inputs
	//
	// HTML5 says that controls under a fieldset > legend:first-child won't be
	// disabled if the fieldset is disabled. Due to implementation difficulty, we
	// don't honor that edge case; we style them as disabled anyway.
	&[disabled],
	&[readonly],
	fieldset[disabled] & {
		cursor: $cursor-disabled;
		background-color: $input-bg-disabled;
		opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
		border-color: $input-border-color-disabled;

		&:hover {
			border-color: $input-border-color-disabled;
			@include box-shadow(none);
		}
	}

	&[disabled],
	fieldset[disabled] & {
		cursor: $cursor-disabled;
	}

	// [converter] extracted textarea& to textarea.form-control
}
// Reset height for `textarea`s
textarea.form-control {
	padding: $padding-base-horizontal $padding-base-horizontal;
	line-height: normal;
	min-height: 114px;
	height: auto;
}

// Search inputs in iOS
//
// This overrides the extra rounded corners on search inputs in iOS so that our
// `.form-control` class can properly style them. Note that this cannot simply
// be added to `.form-control` as it's not specific enough. For details, see
// https://github.com/twbs/bootstrap/issues/11586.

input[type="search"] {
	-webkit-appearance: none;
	padding: 0 35px;

	&:focus {
		+ .glyphicon-search + a {
			display: block;
		}
	}
	+ .glyphicon-search {
		position: absolute;
		font-size: $font-size-base;
		line-height: $input-height-base;
		color: $input-stroke;
		left: 10px;
		top: 0;

		+ a {
			line-height: $input-height-base;
			text-decoration: none;
			position: absolute;
			display: none;
			right: 7px; // 10px - 3px padding
			top: 0;

			&:hover,
			&:focus {
				display: block;

				.glyphicon-remove {
					border-color: $input-stroke;
				}
			}
			.glyphicon-remove {
				border: 1px solid transparent;
				font-size: $font-size-base;
				color: $input-stroke;
				padding: 3px;
			}
		}
	}
}


// Checkboxes and radios
.checkbox-bg-dark,
.radio-bg-dark {
	.radio input[type="radio"],
	.radio-inline input[type="radio"],
	.checkbox input[type="checkbox"],
	.checkbox-inline input[type="checkbox"] {
		&:hover + span::before,
		&:focus + span::before,
		&:checked:hover + span::before,
		&:checked:focus + span::before {
			background-color: transparent;
			border-color: $blue20;
		}
		&:checked + span {
			&::before {
				background-color: transparent;
				border-color: $white;
			}
			&::after {
				color: $blue20;
			}
		}
		&:disabled + span::before {
			background-color: transparent;
			border-color: $gray20;
		}
		+ span {
			color: $white;

			&::before {
				background-color: transparent;
				border-color: transparent;
				border: 1px solid $white;
			}
		}
	}
}

// Font family and padding
.radio,
.checkbox {
	margin-bottom: 30px;
	label {
		padding: 0;
	}
}

.radio + .radio,
.checkbox + .checkbox {
	margin-top: -20px;
}

// Inline margin and padding
.radio-inline,
.checkbox-inline,
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
	margin: 10px 0;
	padding: 0;

	label {
		margin-right: 0;
	}
}
.radio-inline + .radio-inline,
.checkbox-inline + .checkbox-inline {
	margin-left: 20px;
}
.radio input[type="radio"],
.radio-inline input[type="radio"],
.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
	opacity: 0;
	margin: 0;

	&:checked + span::before {
		background-color: transparent;;
		border-color: $gray60;
	}
	&:hover + span::before,
	&:focus + span::before {
		background-color: transparent;
		border-color: $blue50;
	}
	&:disabled + span {
		cursor: not-allowed;
		color: $gray20;

		&::before {
			background-color: transparent;
			border-color: $gray20;
		}
	}
	&:disabled:hover + span::before,
	&:disabled:focus + span::before {
		border-color: $gray20;
	}
	+ span::before {
		@include square(19px);
		display: inline-block;
		position: relative;
		background-color: transparent;
		border: 1px solid $gray60;
		margin-right: 10px;
		content: '';
	}
}

.checkbox input[type="checkbox"],
.checkbox-inline input[type="checkbox"] {
	&:checked + span::after {
		content: $glyphicon-ok;
		position: absolute;
		top: 5px;
		left: 2px;
		color: $blue50;
		font-weight: bold;
	}
	+ span {
		&::before {
			color: $white;
			border-radius: $border-radius-base;
			top: .25em;
		}
		&::after {
			@extend .glyphicon;
		}
	}
}
.radio input[type="radio"],
.radio-inline input[type="radio"] {
	&:checked + span::after {
		@include square(13px);
		content: '';
		position: absolute;
		top: 8px;
		left: 3px;
		display: inline-block;
		background-color: $blue50;
		border-radius: 100%;
		border-color: $gray60;
	}
	+ span::before {
		border-radius: 100%;
		top: 5px;
	}
}

.radio-sm,
.checkbox-sm {
	label {
		font-size: $font-size-small;
	}
}
.radio-sm input[type="radio"],
.checkbox-sm input[type="checkbox"] {
	+ span::before {
		@include square(14px);
		top: 2px;
	}
	&:checked + span::after {
		@include square(10px);
		top: 4px;
		left: 2px;
	}
}
.checkbox-sm input[type="checkbox"] {
	&:checked + span::after {
		font-size: $font-size-small;
		top: 0;
		left: 1px;
	}
}

// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// The `.form-group-* form-control` variations are sadly duplicated to avoid the
// issue documented in https://github.com/twbs/bootstrap/issues/15074.

@include input-size('.input-sm', $input-height-small, $padding-small-vertical, $padding-small-horizontal, $font-size-small, $input-line-height-small, 0);
.form-group-sm {
	@include input-size('.form-control', $input-height-small, $padding-small-vertical, $padding-small-horizontal, $font-size-small, $input-line-height-small, 0);

	.form-control-static {
		height: $input-height-small;
		padding: $padding-small-vertical $padding-small-horizontal;
		font-size: $font-size-base;
		line-height: $input-line-height-small;
	}
}
@include input-size('.input-lg', $input-height-large, $padding-large-vertical, $padding-large-horizontal, $font-size-large, $input-line-height-large, 0);
.form-group-lg {
	@include input-size('.form-control', $input-height-large, $padding-small-vertical, $padding-large-horizontal, $font-size-large, $input-line-height-large, 0);

	.form-control-static {
		height: $input-height-large;
		padding: $padding-small-vertical $padding-large-horizontal;
		font-size: $font-size-large;
		line-height: $input-line-height-large;
	}
}

// Feedback icon (requires .glyphicon classes)
.form-control-feedback {
	@include square(auto);
	position: relative;
	float: left;
	line-height: $line-height-base;
	margin-right: 10px;
}

// Feedback states
.has-success {
	@include com-form-validation($state-success-text, $state-success-border);
}
.has-warning {
	@include com-form-validation($state-warning-text, $state-warning-border);
}
.has-error {
	@include com-form-validation($state-danger-text, $state-danger-border);
}

// Help text
//
// Apply to any element you wish to create light text for placement immediately
// below a form control. Use for general help, formatting, or instructional text.

.help-block {
	margin: 10px 0;
	color: $legend-color;
	font-style: italic;
	font-size: $font-size-small;
}

// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.

.form-horizontal {
	.control-label {
		margin-right: 0;
		line-height: $input-line-height-base;
	}

	// Form group sizes
	//
	// Quick utility class for applying `.input-lg` and `.input-sm` styles to the
	// inputs and labels within a `.form-group`.
	.form-group-lg {
		.control-label {
			line-height: $input-line-height-large;
		}
	}
	.form-group-sm {
		.control-label {
			line-height: $input-line-height-small;
		}
	}
}
